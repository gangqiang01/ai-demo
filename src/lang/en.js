const home =  {
    //deviceList: "Device List",
    groupList: "Group Manager",
    deviceMonitor: "Device Monitor",
    remoteControl: "Remote Control",
    softwareDeploy: "Software Deploy",
    systemUpdate: "OS Update",
    remoteDesktop: "Remote Desktop",
    configurations: "Configurations",
    wordorderList: "Provisioning",
    license: "License",
    appSecurity: "App Security",
    deployFile: "File Deploy",
    solutionApps: "Solution AppS",
    androidapp: "Android App",
    docker: "Docker",
    winPackage: "Win Package",
    linuxPackage: "Linux Package",
    deviceControl: "Device Control",
    appControl: "App Control",
    overview: "Overview",
    setting: "Monitor Setting",
    dockerControl: "Docker Control",
    systemSetting: "Security Settings",
    codesysManager: "Codesys Manager",
    device: "Device",
    alertCenter: "Alarm Center",
    eventAlert: "Event Alarm",
    monitorAlert: "Alarm List",
    deviceTopo: "Device Topology",
    ruleEngine: "Rule Engine",
    ruleLinkage: "Rule Linkage",
    dataForward: "Data Forward",
    screenMonitoring: "Screen monitoring",
    systemSettings: "System Settings",
    operationRecords: "Operation Records",
    userCenter: "User Center",
    multiTenant: "Tenant Management",
    userManagement: "User Management",
    roleManagement: "Role Management",
    screenManage: "Dashboard",

    subDeviceList: "Device List",
    deviceModel: "Device Model",
    splitDisplay: "Split Screen Display",
    ai: "Video Monitor",
    aiModel: "AI Model",
    aiDetect: "AI Detect",
    networkVideo: "Network Video",
    channelConfiguration: "Channel Configuration",
    splitDisplay: "Split Display",
    deviceMonitor: "Device Monitor",
    audioMonitor: "Video Detect",
}

const login = {
    welcome: "Welcome To",
    server: "Industry Edge Device Manager Server",
    remember: "Remember me",
    login: "SIGN IN",
    subTitle: "Sign in",

    verifycodeEmpty: 'please input verifycode',
    verifycodeError: "Verifycode is error",
    // placeholder
    inputUsernameHolder: "Please input username",
    inputPasswordHolder: "Please input password",
    inputVerifyCodeHolder: "Please input verify code"
}
const time = {
    milliseconds: "Milliseconds",
    seconds: "Seconds",
    minutes: "Minutes",
    hours: "Hours",
    days: "Days",
    weeks: "Weeks",
    months: "Months",
    years: "Years"
}

//global prop
const global = {
    success: "Success",
     // error info
    verifyDescriptionError: 'Consecutive Spaces are not allowed,The maximum length is 256',
    verifyCommonError: "Consecutive Spaces are not allowed length 1~128",
    verifyNameError: "Must begin with letter number Chinese,contain Chinese @ - _ . : space letter number length 1~32",
    verifyPwdError: "Only 0-9 a-z A-Z _- @ & $ # . allowed length 3~32",
    verifyNumberError: "Only number, allowed length 0-32",
    verifyHexadecimalNumberError: "Only hexadecimal input is supported, and it is an integer. The value range is 1~65536",
    verifyIdNumberError: "Only integer input is supported, and the value range is 1~278",
    verifyQuantityNumberError: "Only integer input is supported, and the value range is 1~125",
    verifyQuantity1NumberError: "Only integer input is supported, and the value range is 1~2000",
    verifyUNumberError: "Only positive integer , allowed length 1-32",
    verifyServerAddressError: 'Server address error',
    verifyEmailError: 'Email format error',
    verifyPortError: "Prot error",
    verifyServerIPError: "IP address error",
    required: "Required, does not support entering spaces",
 
    verifyServerIpError: 'Server IP error',
    verifyServerPortError: 'Server Prot error',
    verifyLicenseKeyError: "Must begin with letter/number,contain line/letter/number length 3~24",
    verifyAuthCodeError: "Must begin with letter/number,contain line/letter/number length 3~24",
    verifyIpError: "Required, and only supports IP format input. The values are not 0.0.0.0/255.255.255.255",
    verifySusiParameterError: "Required,a numerical value and ranges from 0 to 255",
    verifyPkgError: "Package name is illegal",
    lockPwdError: "A six-digit password",
    dataTypeError: "Data type error",
    // button
    action: "Action",
    move: "Move",
    delete: "Delete",
    start: "Start",
    stop: "Stop",
    restart: "Restart",
    pause: "Pause",
    resume: "Resume",
    kill: "Kill",
    remove: "Remove",
    fremove: "Force Remove",
    status: "Status",
    success: "Success",
    failed: "Failed",
    deploying: "Deploying",
    running: "Running",
    waiting: "Waiting",
    cancel: "Cancel",
    confirm: "Confirm",
    single: "Single",
    batch: "Batch",
    deviceList: "Device List",
    groupList: "Group List",
    save: "Save",
    clearAll: "Clear All",
    submit: "Submit",
    add: 'Add',
    create: "Create",
    set: "Set",
    setKiosk: 'Set Kiosk',
    install: "Install",
    complete: 'Complete',
    deploy: "Deploy",
    redeploy: "Redeploy",
    apply: "Apply",
    back: "Back",
    rename: "Rename",
    summary: "Summary",
    modify: "Modify",
    repeat: "Repeat",
    download: "Download",
    enable: "Enable",
    disable: "Disable",
    or: "Or",
    // event msg
    critical: "Critical",
    warning: "warning",
    info: "Info",
    register: "Register",
    deregister: "Deregister",
    all: "All",

    // swal info
    loginExpired: "Login expired", 
    functionNotSupport: "This function is not supported",
    devicesOffline: "All devices are offline",
    selectDevice: "Please select device",
    selectDelete: "Please select and delete",
    selectGroup: "Please select device group",
    selectDate: "Please select date",
    selectFile: "Please select file",
    areYouSure: "Are You Sure?",
    noData: "No Data",
    loading: "Loading",
    sameDevice: "Please select the same type device",
    //serverconfig
    platform: "Platform",
    agent: "Agent",
    selectCycle: "Please select cycle",
    close: "Close",
    update: "Update",
    apply: "Apply",

    show: "Show",
    hide: "Hide",
    copy: "Copy",
    log: "Log",
    view: "View",
    edit: "Edit",
    set: " Setting",
    batch: "Batch",
    refresh: "Refresh",
    chart: "Chart",
    import: "Import",
    export: "Export",
    upload: "Upload",
    keywords: 'Keywords',
    note: "Note",
    error: "Error"
}
//form label
const label = {
    deviceName: "Device Name",
    groupName: "Group Name",
    selectGroup: "Select Group",
    selectDevice: "Select Device",
    deviceGroup: "Device Group",
    oldPassword: "Old Password",
    newPassword: "New Password",
    confirmPassword: "Confirm New Password",
    groupDescription: "Group Description",
    // app control
    taskName: "Task Name",
    launchApp: "Launch App",
    stopApp: "Stop App",
    enableApp: "Enable App",
    disableApp: "Disable App",
    // system control
    deployName: "Deploy Name",
    deployPath: "Deploy Path",
    deployComment: "Deploy Comment",
    
    //systemVersion: "OS Version",
    //boardName: "Board Name",
    platformName: "Platform Name",
    buildVersion: "Build Version",
    deviceName: "Device Name",
    // configuration
    serverIp: "Server IP",
    serverPort: "Server Port",
    //device details
    deviceManufacture: "Device Manufacture",
    //systemVersion: "OS Version",
    physicalAddress: "Physical Address",
    //agentVersion: "Agent Version",
    supportModes: "Support Modes",
    devicename: "Device Name",
    //license
    selectLicenseFile: "License File",
    //workorder
    workorderDescription: "Description",
    workorderName: "Name",
    package: "Package", 
    workorderType: "Type",
    //solutionApp
    solutionName: "Solution Name",
    solutionAppPkgName: "App Package Name",
    solutionAppUrl: "Solution Page Url",
    solutionAppDescription: "Solution Description",
    uploadSolutionAppIcon: "App Icon",
    timePeriod: "Time Period",
    //user
    userName: "User Name",
    password: "Password",
    userRole: "User Role",
    email: "Email",
    isReport: "Email Notification",

    supportOfflineDeploy: "Support Offline Deploy",

    selectOs: "Select OS",
    groupType: "Group Type",
    selectType: "Select Type",

    replicas: "Replicas",
    image: "Image",
    name: "Name",
    id: "Id",
    schedulingMode: "Scheduling Mode",
    createdTime: "Created Time",
    lastUpdateTime: "Last Update Time",

    deviceOs: "Device OS",
    functionMenu: "Function Menu",
    dockerStatus: "Docker Status",
    swarmStatus: "Swarm Status",
    swarmSwitch: "Swarm Switch",
    lockPassword: "Password Lock Screen",
    type: "Type",
    title: "Title",
    content: "Content",
    plcConnectStatus: "PLC Connect Status",

    //model
    deviceModel: "Device Model",
    deviceModelId: "Device Model ID",
    manufacturer: "Manufacturer",
    industry: "Industry",
    dataFormat: "Data Format",
    description: "Description",
    moduleName: "Module Name",
    maintain: "Maintain Time",
    detectionPeriod: "Detection Period",
    reportType: "Report Type",
    interval: "Report Interval",

    //rule
    device: "Device",
    subDevice: "Sub Device",
    event: "Event",
    alert: "Alarm",
    property: "Property",
    propertyValue: "Property Value",
    trigger: "Trigger",
    action: "Action",
    deviceControl: "Device Control",
    
    type: "Type",
    propertyName: "Property Name",
    dataType: "Data Type",
    valueRange: "Value Range",
    writeable: "Writeable",
    report: "Report",
    unit: "Unit",
    description: "Description",
    eventName: "Event Name",
    eventType: "Event Type",
    modelName: "Model Name",

    deviceType: "Device Type",
    protocolType: "Protocol Type",
    parentDevice: "Parent Device",
    exePath: "Exe Path",
    parameter: "Parameter",
    collectInterval: "Sampling Period",
    level: "Level",
    notification: "Notification",
    condition: "Condition",
    desiredValue: 'Desired Value',

    timeout: "Timeout",

    //overview
    agentVersion: "Agent Version",
    agentruntimes: "Agent Runtimes",
    boardName: "BoardName",
    cpu: "CPU",
    ip: "IP",
    os: "Os",
    osVersion: "Os Version",
    zone: "Zone"
}

const common = {
    single: "Single",
    batch: "Batch",
    deviceList: "Device List",
    onlineDevices: "Online Devices",
    groupList: "Group List",
    online: "Online",
    offline: "Offline",
    selectGroupSwal:"Please select group",
    standardDevice: "Standard Device"
}

const overview = {
    overview: "Overview",
    total: "Total",
    online: "Online",
    warning: "Warning",
    error: "Error",
    normal: "Normal",
    critical: "Error",
    groupStatus: "Group Status",
    deviceStatus: "Online Status",
    abnormalStatus: "Abnormal Status(Online)",
    unknown: "Unknown",
    cpu: "CPU",
    temperature: "Temp",
    usage: "Usage",
    memory: "Memory",
    size: "Total",
    free: "Free",
    storage: "Storage",
    battery: "Battery",
    available: "Available",
    health: "Health",
    online: "Online",
    offline: "Offline",
    peripheral: "Peripheral",
    manufacturer: "Manufacturer",
    status: "Status",
    connect: "Connect",
    disconnect: "Disconnect",
    appName: "App Name",
    packageName: "Package Name",
    versionName: "Version Name",
    cpuPercent: "CPU(%)",
    memoryPercent: "Memory(%)",
    stop: "Stop",
    running: "Running",
    close: "Stop",
    start: "Start",
    details: "Details",
    kill: "Kill",
    deviceMonitor: "Device Monitor",
    processMonitor: "Process Monitor",
    appMonitor: "App Monitor",
    usbMonitor: "Peripheral Monitor",
    dockerMonitor: "Docker Monitor",

    containerName: "Container Name",
    command: "Command",
    image: "Image",
    restart: "Restart",
    cmd: "CMD",
    rate: "Usage",
    notInstall: "Not Installed",
    install: "Install",
    batteryInfo: "Battery Info",
    chargeStatus: "Charge Status",
    health: "Health",
    capacityDesign: "Capacity Design",
    maxCurrent: "Max Current",
    maxVoltage: "Max Voltage",
    technology: "Technology",
    voltage: "Voltage",
    current: "Current",
    temp: "Temperature",
    chargeLevel: "Charge Level",
    totalDevice: "Total Devices",
    onlineDevice: "Online Devices",
    subDeviceMonitor: "SubDevice Monitor",
    viewDetails: "View",
    alertLogDetails: "Alarm Log",
    beginTime: "Begin Time",
    finishTime: "Finish Time",
    to: "To",
}

const setting = {
    setting: "Monitor Setting",
    systemSetup: "System Setting",
    thresholdSetup: "Threshold Setting",
    softwareMonitor: "App Setting",
    processMonitor: "Process Monitor",
    saveAll: 'Save',
    cputem: "CPU Temperature(℃)",
    cpuusage: "CPU Usage(%)",
    memory: "Memory Usage(%)",
    storage: "Storage Usage(%)",
    battery: "Battery(%)",
    normal: "normal",
    error: "error",
    warning: "warning",
    usage: "Usage",
    processKeywordHolder: "Keywords of CMD" ,
    notMonitorProcess: "Not Monitored",
    monitorProcess: "Being Monitored",
    dockerMonitor: "Docker Setting",
    containerName: "Container Name",
    notMonitorContainer: "Not Monitored",
    monitorContainer: "Being Monitored",
    containerKeywordHolder: "Keywords of container name",
    compose: "Compose",
    processSetting: "Process Setting",
    dockerSetting: "Docker Setting",
    appSetting: "App Setting",
    processKeywords: "Keywords of process",
    switch: "Switch",
    name: "Name",
    condition: "Condition",
    delay: "Duration Time",
    value: "Value",
    operation: "Operation",
    addProcessMonitor: "Add Monitor Process",
}

const device = {
    deviceList: "Device List",
    all: "All",
    agentId: "Agent ID",
    deviceName: "Device Name",
    boardName: "Board Name",
    updateTime: "Update Time",
    ipAddress: "Client Address",
    online: "Online",
    offline: "Offline",
    deviceDetails: "Device Details",
    editDeviceName: "Edit Device Name",
    moveGroupTitle: "Edit Device Group",
    groupManagement: "Group Management",
    qrCodeIntroduce: "Please scan this qr code using the AppHub mobile app to configure your agent",
    group: "Group",
    // devicedetails
    deviceDetails: "Device Details",
    deviceMonitor: "Device Monitor",
    // swal
    deviceLikeName: "Contain chinese/line/dot/colon/letter/number/underline length 1~18",
    noGroup: "At least one group for a device",
    // placeholder
    selectGroupHolder: "Please select group",
    selectDeviceHolder: "Please select device",
    keywordHolder: "Keywords for device name",
    inputDeviceNameHolder: "Please input device name",
    selectOsHolder: "Please select OS",
    os: "OS",
    function: "Function",
    hardware: "Hardware Status",
    software: "Software Status",
    kvm: "KVM",
    monitor: "Monitor",
    poweroff: "Power Off",
    reboot: "Reboot",
    terminal: "Terminal",
    log: "Log",
    offline: "Offline",
    offlineInfo: "All data will be cleared when the device offline.",
    bindStatus: "Bind",
    bindTooltip: "After the device is bind, it cannot be configured to connect to other AppHub server.",
    bind: "Bind",
    unbind: "Unbind",

    // device details
    deviceName: "Device Name",
    deviceLocation: "Device Location",
    deviceDomain: "Device Domain",
    hostname: "Hostname",
    cpuModel: "CPU Model",
    osInfo: 'OS Information',
    ipAddress: "IP Address",
    memory: "Memory",
    agentVersion: "Agent Version",
    agentRunTime: "Agent Start Time",
    biosVersion: "BIOS Version",
    biosReleaseTime: "BIOS Release Time",
    boardname: "Boardname",
    zone: "Zone",
    time: "Date",
    lng: "Longitude",
    lat: "Latitude",
    lngTip: "The value range of longitude is - 180~180. Only integers and decimals are supported (6 digits are reserved after the decimal point",
    latTip: "The value range of latitude is - 90~90. Only integers and decimals are supported (6 digits are reserved after the decimal point)",
    subDeviceStatus: "subDevice status",
    exportDevices: "Export Device List",
    macAddress: "Mac Address",
    organization: "Organization",
}

const header = {
    noNotification: "No new notifications",
    youHave: "you have",
    newNotification: "new notifications",
    deviceAgent: "Device Agent",
    agentVersion: "Agent Version",
    date: "Date",
    deviceName: "Device Name",
    viewAll:"View all event",
    markAll: "Mark All as read",
    lastAccessed: "Last Accessed",
    deviceConnected: "Device Connected",
    role: "User Role",
    resetPassword: "Reset Password",
    loginOut: "Login Out",
    samePassword: "The new password and old password must be inconsistent",
    device: "Device",
    offline: "Offline",
    online: "Online",
    moreMsg: "More Notifications",
    administrator: "Administrator",
    superUser: "Super User",
    generalUser: "General User",
    // swal
    passwordNotMatch: "The new password and confirmed password do not match",
    // placeholder
    inputOldPasswordHolder: "Please input old password",
    inputNewPasswordHolder: "Please input new password",
    inputConfirmPasswordHolder: "Please input new password again",
    repo: "Repo Portal",
    licenseActivation: "License Activation",
    agentDownload: "Agent Download",
    relatedConfiguration: "System Settings",
    menuConfiguration: "Menu Configuration",
    edgeOnDeployDownload: "AppHub Apk Download",

    validatePwd: 'Composed of at least one uppercase letter, a lowercase letter, a number, a special character. the length is 8',
    agentConfig: "Agent Config",
    user: "Account",
    language: "Language",
    notification: "Notification",
    about: "About",

    aStore: "Repo Portal",
    repo: "Repo Portal",

    licenseLevel: "License Level",
    basicLicenseIntro: "Trail version:  Free version and no need to activation, but only support 3 devices online.",
    proLicenseIntro: "Pro version: No restrictions, but need to subscribe in the EnSaaS Catalog",
    basicVersion: "Trial Version",
    stardandVersion: "Stardand Version",
    proVersion: "Pro Version",

}

const group = {
    groupManager: "Group Manager",
    editGroupName: "Edit Group Name",
    addGroup: "Add Group",
    // placeholder
    inputGroupNameHolder: "Please input group name",
    inputGroupDescriptionHolder: "Please input group description",
}

const monitor = {
    deviceMonitor: "Device Monitor",
    lineChart: "Line Chart",
    setIntervalTime: "Set Interval Time",
    hardwareMonitor: "Hardware Monitor",
    softwareMonitor: "Software Monitor",
    '0min': "0 minutes",
    '5min': "5 minutes",
    '10min': "10 minutes",
    '20min': "20 minutes",
    '30min': "30 minutes",
}

const appControl = {
    appDeploy: "App Deploy",
    appControl: "App Control",
    appMarket: "App Market",
    appName: "App Name",
    packageName: "Package Name",
    versionName: "Version Name",
    install: "Install",
    uninstall: "Uninstall",
    upgrade: "Upgrade",
    installApp: "Install App",
    //batch install history
    appManagerHistory: "App Deploy History",
    deviceId: "Device ID",
    deviceName: "Device Name",
    taskName: "Task Name",
    apkName: "Apk Name",
    beginTime: "Begin Time",
    finishTime: "Finish Time",
    installStatus: "Status",
    errorStatus: "Error Status",
    action: "Action",
    reinstall: "Repeat",
    clearAll: "Clear All",
    batchInstallApk: "Batch Operation Apk",
    function: "Application",
    

    //summary
    total: "Total",
    deploying: "Deploying",
    success: "Success",
    failed: "Failed",

    // single
    appOperation: "App Operation",
    thirdApp: "Third-party App ",
    systemApp: "System App",
    desktopApp:"Desktop App",
    launch: "Open",
    stop: "Close",
    enable: "Enable",
    disable: "Disable",
    setKiosk: "Set Kiosk",
    cancelKiosk: "Cancel Kiosk",
    tag: "Tag",
    // cid
    launchApp: "Launch App",
    stopApp: "Stop App",
    enableApp: "Enable App",
    disableApp: "Disable App",
    installApp: "Install App",
    uninstallApp: 'Uninstall App',
    upgradeApp: "Upgrade App",
    // placeholder
    selectApp: "Please select app",
    installAppTaskName: "The task name of this batch operation app",
    keywordHolder: "Keyword of app name",
    //swal
    appNotInWhitelist: "This app is not in the whitelist"

}

const remoteControl = {
    remoteControl: "Remote Control",
    reboot: "Reboot",
    systemSetup: "System Setup",
    schedule: "Schedule Task",
    history: "Schedule History",
    shutdown: "Shutdown",
    batchSetupTaskName: "The task name of this batch system setup",
    batchSystemSetup: "Batch System Setup",
    deviceName: "Device Name",
    taskName: "Task Name",
    beginTime: "Begin Time",
    function: "Function",
    dateTime: "Schedule Begin Time",
    status: "Status",
    errorStatus: "Error Status",
    cycleTime: "Cycle Time(day)",
    once: "Once",
    repeat: "Repeat",
    disable: "Disable",
    save: "Save",
    datetimeHolder: "select date and time",
    cycleHolder: "select cycle",
    oneDay: "one day",
    oneWeek: "one week",
    oneMonth: "one month",
    threeMonths: "three months",
    sixMonths: "six months",
    oneYear: "one year",
    brightness: "Brightness",
    audio: "Audio",
    lockScreen: "Lock Screen",
    openState: "Open State",
    lockedState: "Locked State",
    lockPassword: "Password Lock Screen",
    batchLockScreen: "Batch Lock Screen",
    newsPush: "News Push",
    titleHolder: "News Title",
    contentHolder: "News Content",
    general: "General",
    important: "Important",
    bind: "Bind",
    unbind: "Unbind",
    deviceBind: "Device Bind",
    bindPassword: "Set Bind Password",
    note: "Note",
    noteContent: "When the device is unbound with the server, the password needs to be entered",
    commandSent: "Command Send",
    command: "Command",
    commandEmpty: "Command is empty",
    commandError: "Please input command",
    userError: "Select the user to execute the command",
    user: "User",
    parameter: 'Parameter',
    timeSync: "Time Sync",
    timeSyncNote: 'Save the agent time and server time consistent, Note: please ensure that the server time is standard time before synchronization'
}

const winPkgControl = {
    pkgDeploy: "Win Package Deploy",
    exePkgMarket: "Exe Package Market",
    compressedPkgMarket: "Compressed Package Market",
    projectName: "Product Name",
    version: "Version",
    install: "Install",
    uninstall: "Uninstall",
    upgrade: "Upgrade",
    fileName: "File Name",
    fileType: "File Type",
    tag: "Tag",
    //batch install history
    winManagerHistory: "Win Package Deploy History",
    deviceId: "Device ID",
    deviceName: "Device Name",
    taskName: "Task Name",
    beginTime: "Begin Time",
    finishTime: "Finish Time",
    installStatus: "Status",
    errorStatus: "Error Status",
    action: "Action",
    repeat: "Repeat",
    clearAll: "Clear All",
    batchInstallPkg: "Batch Operation",
    function: "Application",

    note: "Note",
    noteContent: "Some win packages cannot be uninstalled due to interaction",
    //summary
    total: "Total",
    deploying: "Deploying",
    success: "Success",
    failed: "Failed",
    // cid
    installPkg: "Install",
    upgradePkg: "Upgrade",
    uninstallPkg: "Uninstall",
    installExe: "Install",
    upgradeExe: "Upgrade",
    uninstallExe: "Uninstall",
    // placeholder
    selectPkg: "Please select package",
    keywordHolder: "Keyword of product name",
    installPkgTaskName: "The task name"
}

const linuxPkgControl = {
    pkgDeploy: "linux Package Deploy",
    pkgMarket: "linux Package Market",
    productName: "Product Name",
    version: "Version",
    install: "Install",
    uninstall: "Uninstall",
    upgrade: "Upgrade",
    fileName: "File Name",
    fileType: "File Type",
    compressPkg: "Compressed Package",
    debPkg: "Debian Package",
    tag: "Tag",
    //batch install history
    linuxManagerHistory: "Linux Package Deploy History",
    deviceId: "Device ID",
    deviceName: "Device Name",
    taskName: "Task Name",
    beginTime: "Begin Time",
    finishTime: "Finish Time",
    installStatus: "Status",
    errorStatus: "Error Status",
    action: "Action",
    repeat: "Repeat",
    clearAll: "Clear All",
    batchInstallPkg: "Batch Operation",
    function: "Application",

    //summary
    total: "Total",
    deploying: "Deploying",
    success: "Success",
    failed: "Failed",
    // cid
    installPkg: "Install",
    upgradePkg: "Upgrade",
    uninstallPkg: "Uninstall",
    // placeholder
    selectPkg: "Please select package",
    keywordHolder: "Keyword of product name",
    installPkgTaskName: "The task name"
}

const dockerControl = {
    dockerDeploy: "Stack Deploy",
    dockerMarket: "Stack Market",
    projectName: "Product Name",
    version: "Version",
    install: "Install",
    repeat: "Repeat",
    uninstall: "Uninstall",
    upgrade: "Upgrade",
    installSwarm: "Install",
    uninstallSwarm: "Uninstall",
    upgradeSwarm: "Upgrade",
    status: "Status",
    dockerStatus: "Status",
    composeStatus: "Compose Status",
    view: "View",
    restart: "Restart",
    stop: "Stop",
    start: "Start",
    startSwarm: "Start",
    stopSwarm: "Stop",
    restartSwarm: "Restart",
    details: "Details",
    dockerOperation: "Docker Operation",
    dockerCompose: "Docker Compose",
    compose: "Compose",
    history: "History",
    dockerControl: "Docker Control",
    container: "Container",
    quickAction: "Quick Action",
    image: "Image",
    name: "Name",
    state: "State",

    stack: "Stack",
    created: "Created",
    publishedPort: "Published Port",
    dockerMonitor: "Container Monitor",
    content: "Content",
    type: "Type",
    tasks: "Tasks",
    control: "Control",
    lastupdate: "Last Update",
    updataImage: "Update Image",

    //images
    imageId: "Image Id",
    repository: "Repository",
    tag: 'Tag',
    size: "Size",
    createTime: "Create Time",
    cmd: "Command",
    //server
    serviceList: "Service List",
    service: "Service",
    stack: "Stack",
    schedulingMode: "Scheduling Mode",
    taskStatus: "Task Status",
    serviceName: "Service Name",
    serviceId: "Service Id",
    editComposeFile: "Edit Compose File",

    
    //batch install history
    dockerManagerHistory: "Manager History",
    dockerDeployHistory: "Deploy History",
    deviceId: "Device ID",
    deviceName: "Device Name",
    taskName: "Task Name",
    beginTime: "Begin Time",
    finishTime: "Finish Time",
    installStatus: "Status",
    errorStatus: "Error Status",
    action: "Action",
    clearAll: "Clear All",
    batchInstall: "Batch Operation",
    function: "Application",
    status: "Status",
    fileContent: "File Content",
    //summary
    total: "Total",
    deploying: "Deploying",
    success: "Success",
    failed: "Failed",
    // placeholder
    keywordHolder: "Keyword of product name",
    imagekeywordHolder: "Keyword of image repository",
    containerKeywordHolder: "Keyword of container name",
    serviceKeywordHolder: "Keyword of service name",
    imageHolder: "ex: myImage:myTag",
    installPkgTaskName: "The task name",

    composeList: "Compose List",
    stackList: "Stack List",
    containerList: "Container List",
    imageList: "Image List",
    containers: "Containers",
    id: "Id",
    //container status
    running: "Running",
    failed: "Failed",
    stoped: "Stoped",
    paused: "Paused",
    exited: "Exited",
    created: "Created",

    imageTooltip: "Repository should be publicy available ",
    externalTooltip: "This Swarm is created outside of apphub manager, control this stack is limited",
    external: "External",
    internal: "Internal",
    origin: "Origin",
    switchSwarmCapacity: "Switch Swarm",
    swarmTooltip: "To operate the swarm, the swarm service of the device must be turned on.To operate the compose, the swarm service of the device must be turned off.",
    dockerDeployTooltip: "Repository should be publicy available, To operate the swarm, the swarm service of the device must be turned on, To operate the compose,the swarm service of the device must be turned off."
}

const dockerAction = {

    startContainer: "Start Container",
    stopContainer: "Stop Container",
    restartContainer: "Restart Container",
    killContainer: "Kill Container",
    pauseContainer: "Pause Container",
    resumeContainer: "Resume Container",
    removeContainer: "Remove Container",
    removeImage: "Remove Image",
    stopCompose: "Stop Compose",
    startCompose: "Start Compose",
    restartCompose: "Restart Compose",
    forceRemoveImage: "Force Remove Image",
    updateServiceReplicas: "Update Service Replicas",
    updateServiceImage: "Update Service Image",
    stopSwarm: "Stop Swarm",
    startSwarm: "Start Swarm",
    restartSwarm: "Restart Swarm",
    updateSwarmContent: "Update Content",
    removeService: "Remove Service"
}

const systemUpdate = {
    systemUpdate: "OS Update",
    note: "Note",
    noteContent: "Batch update system can only be used to a group of the same boardname device",
    // batch
    systemMarket: "OS Market",
    boardName: "Board Name",
    buildVersion: "Build Version",
    description: "Description",
    systemUpdateHistory: "OS Update History",
    deviceId: "Device ID",
    deviceName: "Device Name",
    deployName: "Deploy Name",
    deployComment: "Deploy Comment",
    beginTime: "Begin Time",
    finishTime: "Finish Time",
    updateStatus: "Update Status",
    errorStatus: "Error Status",
    action: "Action",
    delete: "Delete",
    redeploy: "Repeat",
    systemDeploy: "OS Deploy",
    filename: "Package Name",
    tag: "Tag",

    //summary
    total: "Total",
    deploying: "Deploying",
    success: "Success",
    failed: "Failed",
    // single
    systemInfo: "OS Info",
    deploy: "Deploy",
    // placeholder
    updateSystemComment: "The comment of this update system",
    updateSystemDeployName: "The deploy name of this update system",
    
}


const fileDeploy = {
    fileDeploy: "File Deploy",
    // batch
    fileMarket: "File Market",
    filename: "File Name",
    description: "Description",
    application: "Application",
    fileDeployHistory: "File Deploy History",
    deviceId: "Device ID",
    deviceName: "Device Name",
    deployName: "Deploy Name",

    action: "Action",
    delete: "Delete",
    deploy: "Deploy",
    action: "Action",
    batchDeployFile: "Batch Deploy File",
    deployFile: "Deploy File",
    savePath: "Deploy Path",
    
    //history list
    repeat: "Repeat",
    deployStatus: "Deploy Status",
    beginTime: "Begin Time",
    finishTime: "Finish Time",
    errorStatus: "Error Status",

    //summary
    total: "Total",
    deploying: "Deploying",
    success: "Success",
    failed: "Failed",

    // fileformat
    img: "Image",
    video: "Video",
    audio: "Audio",
    package: "Package",
    cdsapp: "Codesys App",
    other: "Other",
    fileFormat: "File Format",
    
    // placeholder
    DeployNameHolder: "Please input deploy name",
    keywordHolder: "Keyword of file name",
    savePathHolder: "Please input the absolute path of the device"
    
}

const configuration = {
    configuration: "Configuration",
    configurations: "Configurations",
    aStoreIntroduce: "Repo is used to upload and manage the android apk,BSP packages,linux pkg,windows pkg and files that you need to deploy to the device.The username and password are the same as AppHub Manager",
    aStorePortal: "Repo Portal",
    vncConfiguration: "VNC Configuration",
    degeOnDeployAppDownload: "AppHub Apk Download",
    scanQRCode: "You can scan the QR code to download an AppHub apk using your android phone.",

    scanQRCode1: "If you can't download by scan the QR code, please click the below link to download.",
    // placeholder
    serverIpHolder: "Exp: 172.21.73.144",
    serverPortHolder: "Exp: 9191",
    agentConfiguration: "Deploy Information",
    agentConfigurationIntroduce: "Method 1: You can scan the QR code to configure your agent using AppHub Mobile app.",

    agentConfigurationDownload: "Method 2: You can download the configuration file and then import it to the device through agent.",
    agentDownload: "Agent Download",
    baiduyun: "Baidu Cloud Address",
    fetchCode: "Fetch Code",
    googleDrive: "Google Drive Address",
    repo: "Repo",
    agentConfigurationCopy: "Method 3: You can copy the text and then import it to the device through agent.",
    download: "download",
    copyMessage: "Copy success",
    copy: "Copy",
    menu: "Menu",
    noOs: "Please select device os.",
    noMenu: "Please select function menu.",
    productIconConfig:"Product Icon Configuration",

    manual: "Manual",
    //swal
    appIconInfo: "Supported file suffixes are jpg|jpeg|png|svg for image format",
    productnameInfo: "The product name cannot be empty",
    productname: "Product Name",
    menuConfiguration: "Menu Configuration",
    systemEmail: "Mailbox Configuration",
    alertNotification: "Alarm Notification",
    email: "Email",
    emailServer: "CMailServer:",
    username: "Username:",
    password: "Password:",
    inputEmailServerHolder: "Please input CEmailServer Address",
    inputEmailHolder: "Please input Username",
    inputPasswordHolder: "Please input Password",
    protocolType: "Protocol Type",
    // dingding
    dingdingRobot: "Dingding Robot",
    name: "Name",
    webhook: "Webhook",
    keywords: "Keywords",
    influxDBConfig: "InfluxDb Config",
    address: "Address",
    dbName: "Database Name",
    duration: "Duration Time",
    dataPersistence: "Data Persistense",
    repoConfiguration: "Repo Configuration",
    notification: "Notification",
    inputPortHolder: "Please input the port",
    port: "Port"
}

const vnc = {
    remoteDesktop: "Remote Desktop",
    remoteToYourDevice: "Remote Desktop",
    connect: "Connect",
    fullscreen: "Full screen",
    exitFullscreen: "Exit full screen"
}
const terminal = {
    remoteTerminal: "Remote Terminal",
    remoteToYourDevice: "Remote Terminal",
    connect: "Connect",
    fullscreen: "Full screen",
    exitFullscreen: "Exit full screen",
    terminalPropertyEmpty: "The connection information for the terminal cannot be empty",
    sshUsername: "SSH Username",
    sshPassword: "SSH Password"
}

const license = {
    licenseActivation:"License Activation",
    licenseIntro: "Free trail version only support 3 devices online, and this version can be used directly without activation. If need more devices online, please subscribe AppHub in the EnSaaS Catalog, upload the license file here after activate.",
    localLicenseIntro:"Free trail version only support 3 devices online, and this version can be used directly without activation. If need more devices online, please contact us to get the license file, then upload here to activate.",
    licenseAlert: " Contact jianfeng.dai@advantech.com.cn to purchase the license.",
    licenseDevInfo:  "Device Info: ",
    licenseDevContent: "IXHDIFOOSNXOXH12ONO",

    //swal
    licenseIsNull: "License File is null",
    licenseFileInfo: "The suffix of the license file must be lic",
    licenseFileTxtInfo: "The suffix of the license file must be txt",
    uploadLicense: "Upload License",
    maxAgent: "Currently support online devices maximum numbe:",
    expireTime: "Certificate expire date:", 
    qrCodeIntroduce: "Obtain Auth Code by scanning this QR code",
    activation: "Activation",
    localLicense:"License File",
    wpLicense: "Auth Code",
    licenseKey: "License Key",
    authCode: "Auth Code",
    verify: "Verify",
    workspaceId: "Workspace ID",
    macAddress: "MacAddress",
    pn: "PN",
    status: "Status",
    number: "Number",
    //placeholder
    licenseKeyHolder: "Please input license key",
    authCodeHolder: "Please input Auth Code",
    licenseFromSales: "License From Sales",
    licenseFromMarketplace: "License From Marketplace",
    licenseId: "License Id",
    authcode: "Auth Code",
    count: "Count",
    expireDate: "Expire Date"
}

const server = {
    serverError: "Server Error"
}

const aStore = {
    aStore: "Repo Portal",
    supIntro: "Repo Introduce",
    subIntro: "Repo is a solution to store App, android OS Image and files.",
    subInfo: "can batch deploy App and files from Repo to edge device and update Android OS from Repo for edge device."
}

const workorder = {
    //list
    workorderManager: "Provisioning Manager",
    editWordorderName: "Edit Provisioning Name",
    addWorkorder: "Add Provisioning",
    workorderList: 'Provisioning List',
    editWorkorderName: "Edit Provisioning Name",
    workorderItem: "Provisioning Item",
    workorderName: "Provisioning Name",
    
    //workorderitem
    appName: "App Name",
    packageName: "Package Name",
    versionName: "Version Name",
    install: "Install",
    noData: "No Data",
    noBtData: "Please upload zip package you need in Repo",
    noKioskData: "Please pre-install the app that needs to set kiosk",
    addWorkorderItem: "Add Provisioning item",
    workorderDeploy: "Provisioning Deploy",
    introduce: "Introduce for Provisioning deploy",
    createWdIntroduce: "Introduce for Provisioning creation",
    introContent1: "Do as follows according to your needs",
    introContent2: "1. Upload the app and zip package you need in Repo.",
    introContent3: "2. Add pre-installed App.",
    introContent4: "3. Select Kiosk App from the pre-installed.",
    introContent5: "4. Set system boot animation with zip package.",
    introContent: "First add the pre-installed apk, then select the apk to set Kiosk in these apks, finally select the zip package to set system bootanimation, so as to complete the creation of work order.",
    summaryContent: "In this summary, you can see the list of application of the Provisioning, If you have no modification, just deploy it.",
    preInstallApp: "Pre-Install App",
    setKiosk: "Set Kiosk",
    setBootanimation: "Set Bootanimation",
    setSystemSettings: "Set System Settings",
    systemSettings: "System Settings",
    selectFunction: "Select Settings",
    emptySettings: "System Settings is empty",
    content: "Content",
    compose: "Compose",
    linuxPkg: "Linux Package",
    exePkg: "Exe Package",
    compressedPkg: "Compressed Package",
    dockerCompose: "Docker Compose",
    linuxPkg: "Linux Package",
    summary: "Summary",
    preInstall: "Pre-Install",
    remove: "Remove",

    exportProfile: "Export Profile",

    importProfileSetting: "Import Profile Setting",
    //wdHistory
    dpwdHistory: "Provisioning Deploy History",
    dpStatus: "Deploy Status",
    errorStatus: "Error Status",
    redeploy: "Repeat",

    deviceId: "Device ID",
    deviceName: "Device Name",
    deployName: "Deploy Name",
    fileName: "File Name",
    beginTime: "Begin Time",
    finishTime: "Finish Time",
    batchDpwd: "Batch Provisioning",
    funName: "Application",
    // placeholder
    inputWorkorderNameHolder: "Please input Provisioning name",
    inputWorkorderDescriptionHolder: "Please input Provisioning description",
    wdDeployNameHolder: "Please input deploy name",
    errorConent: "The content of the file is incorrectly formatted",
    yamlType: "The file name suffix must be yml or yaml"

}


const appSecurity = {
    appSecurity: "App Security",
    //batch history
    operatAppHistory: "App Setting History",
    deviceId: "Device ID",
    deviceName: "Device Name",
    taskName: "Task Name",
    apkName: "App Name",
    value: "Whitelist Status",
    packageName: "Package Name",
    versionName: "Version Name",
    time: "Begin Time",
    beginTime: "Begin Time",
    finishTime: "Finish Time",
    installStatus: "Status",
    errorStatus: "Error Status",
    action: "Action",
    reexec: "Repeat",
    clearAll: "Clear All",
    batchExec: "Batch Set",


    execHistory: "Whitelist Switch History",

    enable: "Enable Whitelist",
    disable: "Disable Whitelist",

    funName: "Application",

    //summary
    total: "Total",
    deploying: "Running",
    success: "Success",
    failed: "Failed",

    whitelistManagement: "App Whitelist Management",
    add: "Add",
    remove: "Remove",
    startServer: "Start Server",
    stopServer: "Stop Server",

    noData: "No Third-party App Installed",
    // placeholder
    execTaskName: "Please input task name"
}

const solutionApp = {
    solutionAppManager: "Solution App Manager",
    editSolution: "Edit Solution",
    addSolution: "Add Solution",
    upload: "Upload",
    redirect: "Solution Page",
    solutionAppIconSizeInfo: "Icon size cannot exceed 2M",
    note: "Note",
    noteContent: "View the package name of the app in Repo",

    //swal
    solutionAppIconInfo: "Supported file suffixes are jpg|jpeg|png|bmp for image format",
    //holder
    inputSolutionAppNameHolder: "Please input Solution name",
    inputSolutionAppPkgHolder: "Please input Solution App package name", 
    inputSolutionAppDescriptionHolder: "Please input Solution Description",
    inputSolutionAppUrlHolder: "Please input solution web url"

}

const eventMsg = {
    eventList: "Event List",
    selectGroupHolder: "Please select device group",
    selectTimePeriodHolder: "Please select Time Period",
    selectTypeHolder: "Please select Type",
    ts: "Time",
    level: "Level",
    type: "Type",
    content: "Event Message",
    devname: "Device Name",
    week: "Nearly a week",
    month: "Nearly a month",
    threeMonth: "Nearly three month",

    deviceLikeName: "Contain line/dot/colon/letter/number/underline length 1~18",
    keywordHolder: "Keyword of device name",
    funcId: "Function Id",
    software: "Software",
    hardware: "Hardware",
    peripheral: "Peripheral",
    connect: "Connect",
    event: "Event Alarm"
}

const user = {
    userList: "User List",
    userId: "User ID",
    userName: "User Name",
    create: "Create Time",
    addUser: "Add User",
    keyword: "Keyword of user name",
    editUserRole: "Edit User Role",
    administrator: "Administrator",  
    superUser: "Super User",
    generalUser: "General User",
    role: "Role",
    email: "Email",
    password: "Password",
    updateEmail: "Update Email",
    configurationSelection: "Permission",
    deviceManage: "Device Management",
    deviceRemoteControl: "Device Remote Control",
    otaDeployment: "OTA Deployment",
    dataAcquisitionAndMonitoring: "Data Collection And Monitoring",
    serverSystemConfiguration: "Server System Settings",
    codesysManager: "Codesys Manager",
    screenManage: "Dashboard",
    all: "All",
    permission: "Permission:"
}

const systemSettings = {
    endTime: "End Time",
    tasknamePlaceholder: "The task name of this batch settings",
    batchSettings: "Batch Settings",
    history: "History",
    settings: "Configuration and Settings",
    save: "Save",
    network: "Network & Wireless",
    system: "System",
    secure: "Secure",
    gmset: "Gm Set",
    systemCustomization: "Customize The System Security Policy",
    systemManagement: "Set Security Policies For System Management",
    wlan: "WLAN",
    wifiLock: "WIFI device owner configs lock down",
    disallowWifi: "Disallow config WIFI",
    enableWifi: "Enalbe WIFI",
    setWifis: "Set wifis",
    wifiName: "SSID",
    wifiPasswd: "Password",
    usernamePlaceholder: "Please input wifi ssid",
    passwordPlaceholder: "Please input wifi password",
    positioning: "Location-Based Services",
    bluetooth: "Bluetooth",
    disallowBluetooth: "Disallow Bluetooth",
    enableBluetooth: "Enable Bluetooth",
    volume: "Volume",
    disallowVolume: "Disallow unmute microphone",
    mute: "Mute and disallow adjust volume",
    volumeValue: "Volume value",
    brightness: "Brightness",
    adaptiveBrightness: "Adaptive brightness",
    brightnessValue: "Brightness value",
    screenTimeout: "Screen Timeout",
    selectTimePlaceholder: "Please select the time",
    disallowScreen: "Disallow config screen timeout",
    maxTimeLock: "Max time to lock",
    timeout: "Screen timeout",
    lockScreen: " Not lock screen when charging",
    location: "Location",
    disallowLocation: "Disallow location",
    locationOn: "Location on",
    locationMode: "Location mode",
    time: "Time & Timezone",
    disallowDatetime: "Disallow config datetime",
    timezone: "Auto time & timezone",
    adb: "ADB",
    debugg: "Disallow debugging",
    develop: "Enable develop",
    screenLock: "Lock Screen",
    minlength: "Password min length",
    minlengthPlaceholder: "Please input number between 0-17",
    complex: "Password Complex",
    passwordComplexPlaceholder: "Please select password complexity",
    disallowTrust: "Disallow trust agent",
    notification: "Disallow secure notification",
    notSecure: "Screen lock none when not secure",
    usb: "USB",
    usbTransfer: "Disallow usb transfer",
    usbHid: "Disallow usb hid",
    others: "Others",
    securityLog: "Enable security log",
    autoFill: "Disallow auto fill",
    screenCapture: "Disable screen capture",
    camera: "Disable camera",
    roateScreen: "Auto rotate Screen",
    sensorsOnly: "Sensors only",
    batterySaving: "Battery saving",
    highAccuracy: "High accuracy/on",
    off: "Off"
}

const codesys = {
    deviceAddress: "Device Address",
    deviceName: "Device Name",
    targetID: "Target ID",
    targetName: "Target Name",
    targetType: "Target Type",
    targetVersion: "Target Version",
    projectAuthor: "Author",
    projectDescription: "Description",
    projectName: "Project Name",
    projectProfile: "Project File",
    projectVersion: "Version",
    projectList: "App List",
    productDeploy: "Product Deploy",
    lastChange: "Last Change",
    action: "Action",
    history: "History",
    applicationName: "App Name",
    start: "Start",
    stop: "Stop",
    warm: "Warm",
    cold: "Cold",
    origin: "Origin",
    reload: "Reload",
    keywordHolder: "App Name",
    fileKeywordHolder: 'File Name',
    startApp: "Start App",
    stopApp: "Stop App",
    warmApp: "Warm App",
    coldApp: "Cold App",
    originApp: "Origin App",
    deployFile: "Deploy File",
    reloadApp: "Reload App",
    pclStatus: "PLC Status",
    authenticatedStatus: "Authenticated Status",
    authenticate: "Authenticate",
    authenticated: "authenticated",
    unauthenticated: "unauthenticated",
    username: "User Name",
    password: "Password",
    pclAction: "PCL Action",
    forceConnect: "Force Connect",
    notAuthenticate: "Not authenticate",
}
const screenMonitoring = {
    start: "Connect",
    screenshotTime: "Timed screenshot cycle",
    screenshotTimePlaceholder: "Please enter the screen capture time",
    groupplaceholder: "Please select a device group",
    deviceplaceholder: "Please select a device",
    warnmessage: "No devices under this device group, please reselect!",
    fullScreen: "Full Screen",
    return: "Return",
    timeWarnMessage: "The screenshot time cannot be empty and should not be less than 1000 milliseconds",
    deviceOffline: "Device Offline"
}

const model = {
    name: "Model Name",
    modelList: "Model List",
    modelId: "Model ID",
    deviceModel: "Device Model",
    manufacturer: "Manufacturer",
    industry: "Industry",
    dataFormat: "Data Format",
    description: "Description",
    createDeviceModel: "Create Device Model",
    createTime: "Create Time",
    funcType: "Func Type",
    funcName: "Func Name",
    dataType: "Data Type",
    dataDefinition: "Data Definition",
    writeable: "Writeable",
    action: "Action",
    moduleName: "Module Name",
    createProperty: "Create Property",
    createEvent: "Create Event",
    editModelName: "Edit Model Name",
    valueRange: "Value Range:",
    property: "Property",
    command: "Command",
    event: "Event",
    module: "Module",
    displayList: "Display List",
    value: "Value",
    errorMessage: "Error Message",
    reportTime: "Report Time",
    extensionConfig: "Extension Config",
    eventRuleEmpty: "The rule cannot be empty",
    service: "Service",
    group: "Device Group",
    device: "Device",
    subDevice: "Sub Device",
    noteContent: "General sub-device model configuration Excel file is in AppHub Repo, please download and import if needed."
}
const subDevice = {
    deviceName: "Device Name",
    subDeviceList: "Sub Device List",
    protocolType: "Protocol Type",
    addSubDevice: "Add Sub Device",
    createTime: "Create Time",
    inputDeviceNameHolder: "Input Sub Device Name",
    deviceModel: "Device Model",
    deviceStatus: "Device Status",
    deviceOS: "Device Os",
    overview: "Overview",
    deviceShadow: "Device Shadow",
    deviceId: "Device ID",
    bindDevice: "Bind Device",
    parentDevice: "Parent Device",
    obtainData: "Obtain Data",
    extensionConfig: "Extension Config",
    name: "Name",
    type: "Type",
    deviceGroup: "By Device Group",
    device: "By Device",
    excelFile: "Excel File",
    importType: "Import Type",
    excelType: "Only excel file with the xlsx suffix are supported",
    noteContent: "General sub-device configuration Excel file is in AppHub Repo, if necessary, please first import the model, then download and import it.",
    collectionHistory: "Collect Data",
    keywordHolder: "Keywords for property",
    label: "Tag",
    labelManage: "Tag Management",
    addTag: "Add Tag",
    tagNamePlaceholder: "Please enter tag name",
    tagNameKeyWords: "Keywords for tag names",
    editTag: "Edit Tag",
    groupKeywordHolder: "Keywords for device group",
    eventKeywordHolder: "Keywords for event"
}

const alert = {
    name: "name",
    description: "Description",
    level: "Level",
    notification: "Notification",
    inputEmailHolder: "Email",
    addAlert: "Add Alarm",
    editAlert: "Edit Alarm",
    alertCenter: "Alarm Center",
    rule: "Rule",
    condition: "Condition",
    addRule: "Add Rule",
    eventType: "Event type",
    eventTypeAuto: "Auto report",
    eventTypeRule: "Rule report",
    trapOid: "Trap OID"
}

const rule = {
    name:"Name",
    ruleName: "Rule Name",
    ruleLinkage: "Rule Linkage",
    description: "Description",
    editRule: "Edit Rule",
    addRule: "Add Rule",
    updateTime: "Update Time",
    inputRuleDescriptionHolder: "Please input rule description",
    keywordHolder: "Keywords of rule name",
    status: "Status",
    sceneLinkage: "Scene Linkage",
    setPropertyValueHold: "Set Property Value",
    trigger: "Trigger",
    triggerDetails: "Trigger Details",
    action: "Action",
    actionDetails: "Action Details",
    newTrigger: "New Trigger",
    newAction: "New Action",
    once: "Once",
    continued: "Continued",
    maxTrigger: "The maximum number of supported triggers is ",
    maxAction: "The maximum number of supported action is ",

    eventTrigger: "Event Trigger",
    particularEventTrigger: "Particular Event Trigger",
    alert: "Alarm",
    propertySetting: "Property Setting",
    particularPropertySetting: "Particular Property Setting",
    deviceControl: "Device Control",
    particularDeviceControl: "Particular Device Control",
    reboot: "Reboot",
    shutdown: "Shutdown",
    propertyHolder: "Module/Property",
    eventHolder: "Module/Event",
    error: "Error",
    ruleLinkageLog: "Rule Actions Log",
    incompleteError: "The configuration information is incomplete",
    triggerEmpty: "The trigger cannot be empty",
    actionEmpty: "The action cannot be empty",
    executionCondition: "Execution Condition",
    executionPeriod: "Execution Time",
    maxPeriod: "The maximum number of supported time periods is",
}
const alertList = {
    alarmList: "Alarm list",
    alarmConfig: "Alarm configuration",
    alertname: "Alarm",
    alertTitle: "Alarm name",
    devicename: "Device",
    subdevicename: "Sub Device",
    createTime: "Create Time",
    status: "Status",
    level: "Level",
    description: "Description",
    updateTime: "Update Time",
    handleTime: "Handle Time",
    deal: "Handle",
    deallog: "records",
    unhandled: "Unsolved",
    handled: "Resolved",
    handling: "Solving",
    invalid: "Invalid",
    alertInfo: "Handle Info",
    dealinfo: "Please enter device processing information",
    critical: "Error",
    warning: "Warning",
    info: "Info",
    timeslot: "Time period",
    beginTs: "Start time",
    endTs: "End time",
    alarm_placeholder: "Please select the alarm name",
    devicename_placeholder: "Please select a device name",
    subdevicename_placeholder: "Please select a sub device name",
    level_placeholder: "Please select a level",
    status_placeholder: "Please select a status",
    alert_record: "View history",
    alert_option: "Other operations",
    user: "User",
    historyAlert: "History",
    selectAll: "All",
    clearAll: "Clear All",
    notification: "Notification",
    exportLog: "Export Log",
    detail: "Detail",
    value: "Value"
}
const extendedConfig = {
    addParam: "Add parameters",
    addHeader: "Add header",
    params: "Parameter",
    header: "Header",
    restfulPath: "Restful路径",
    hostname: "Host",
    timeout: "Timeout",
    responseBody: "ResponseId",
    warmMessage: "Cannot delete. If you need to empty the content, please delete it manually",
    ipAddress: "IP Address",
    oid: "OID",
    protocol: "ProtocolMode",
    deviceNode: "DeviceNode",
    baudRate: "BaudRate",
    dataBites: "DataBites(bits)",
    stopBites: "StopBites(bits)",
    parity: "Parity",
    ipAddress: "IpAddress",
    servicePort: "ServicePort",
    slaveID: "Slave ID",
    functionCode: "Function Code",
    address: "Address",
    address_placeholder: "起始地址(十六进制)",
    quantity: "Quantity",
    function: "SUSI Function",
    ronchge: "Only report change data",
    reliable: "Reliable data",
    monitor_function: "Function",
    monitor_cpu_usage: "CPU Usage",
    monitor_cpu_temp: "CPU Temperature",
    monitor_memory_usage: "Memory Usage",
    monitor_memory_used: "Memory Used",
    monitor_memory_total: "Memory Total",
    monitor_disk_total: "Disk Total",
    monitor_disk_used: "Disk Used",
    monitor_disk_usage: "Disk Usage",
    monitor_net_send: "Network Send Speed",
    monitor_net_recv: "Network Receive Speed",
    url: "URL",
    securityPolicy: "Security Policy",
    securityMode: "Security Mode",
    remoteCertfile: "Remote Certfile",
    authenticationSettings: "Authentication",
    anonymous: "Anonymous",
    username: "Username/Password",
    certificate: "Certificate",
    user: "User",
    password: "Password",
    certfile: "Certfile",
    Keyfile: "Private Key",
    nodeId: "Node ID",
    host: "Host",
    port: "Port",
    coa: "COA",
    t0: "T0(s)",
    t1: "T1(s)",
    t2: "T2(s)",
    t3: "T3(s)",
    kValue: "KValue",
    wValue: "WValue",
    ioa: "IOA",
    typeID: "TypeID",
    rack: "Rack",
    slot: "Slot",
    area: "Area",
    dBNumber: "DB Number",
    start: "Start",
    wordLen: "WordLen",
    errorMessage: "Submission error, data format only supports string type"
}
const dashboard = {
    deviceState: "Devices status",
    online: "Online Devices:",
    offline: "Offline Devices:",
    normal: "Normal Devices:",
    error: "Error Devices:",
    warning: "Warning Devices:",
    android: "Android Devices:",
    linux: "Linux Devices:",
    windows: "Window Devices:",
    subDeviceState: "Sub Devices status",
    alertState: "Alarm Status",
    errorAlert: "Error",
    warningAlert: "Warning",
    errorUnhandledAlert: "Unhandled error",
    warningUnhandledAlert: "Unhandled warning",
    handled: "Handled",
    alertRecord: "Recent alarm records",
    alertMore: "See more",
    name: "Alarm Name:",
    edgeName: "Device Name:",
    deviceName: "Subdevice:",
    description: "Alarm Desc.:",
    reportTime: "Report Time:",
    viewDetails: "View Details:",
    deviceStateTab: "Device Status",
    eventStateTab: "Device Events",
    edgeTopEchartTitle: "Top 5 parent devices in seven days",
    deviceTopEchartTitle: "Top 5 sub devices in seven days",
    alertTopEchartTitle: "Top 5 events reported in seven days",
    alertOverviewEchartTitle: "Distribution of reported events in seven days",
    warningTitle: "Tips",
    warningtip: "No longitude and latitude information, unable to locate !",
    noDatatip: "No Data",
    lng: "Longitude:",
    lat: "Latitude:",
    endpoint: "Device ID:",
    baidu: "Baidu Map",
    gaode: "Auto Navi Map",
    monitorDetail: "Monitor Detail",
    alarmDetail: "Alarm Detail",
    warningMsg: "The device is offline, and the device monitoring details cannot be viewed！"
}

const dataForward = {
    dataForward: "Data Forward",
    name: "Name",
    status: "Status",
    description: "Description",
    source: "Data Sources",
    sceneDataForward: "Data Forward Details",
    deviceModelSelect: "Device Model",
    edge: "Device",
    deviceId: "Sub Device",
    username: "User Name",
    password: "Password",
    host: "Server Address",
    queueName: "Queue Name",
    editDataForward: "Edit DataForward",
    addDataForward: "Add DataForward",
    addSource: "New Data Source",
    maxSource: "The maximum number of supported data sources is",
    sourceEmpty: "Data source cannot be empty",
    dataForwardName: "DataForward Name",
    sourceDetails: "Data Source Details",
    way: "DataForward method",
    wayDetails: "Data Destination",
    dataForwardLog: "DataForward Log",
    error: "Error",
    hostTips: "The server address format is incorrect",
    topic: "Topic",
    client: "Client ID",
    qos: "Qos",
    topicTips: "Incorrect theme input",
    clientIdTips: "Client ID input is incorrect"
}
const collectionHistory = {
    displayType: "Display Type",
    echart: "Chart",
    table: "Table",
    //placeholder
    module_placeHolder: "Please enter a property name",
    property_placeHolder: "Please enter a property name",
}
const operationRecord = {
    beginTime: "Begin Time",
    finishTime: "Finish Time",
    to: "To",
    event: "Event",
    username: "Username",
    operation: "Operation",
    operationType: "OperationType",
    executionPeriod: "ExecutionPeriod",
    module_placeHolder: "Please enter the module name",
    property_placeHolder: "Please enter a property name",
    timeslot: "Time period",
    //type
    user: "User",
    device: "Device",
    group: "Group",
    organization: "Organization",
    workorder: "Workorder",
    subDevice: "SubDevice",
    deviceModel: "DeviceModel",
    ruleEngine: "RuleEngine",
    ruleLinkage: "RuleLinkage",
    dataForward: "DataForward",
    userRole: "UserRole",
    alertConfig: "Alarm Configuration",
    alertHistory: "AlarmLog",
    alert: "Alarm",
    systemConfig: "System Settings",
    //event
    create: "Create",
    updateName: "Update",
    delete: "Delete",
    deviceGroup: "EditGroup",
    setLocation: "Set Latitude And Longitude",
    deployWorkorder: "DeployWorkorder",
    importSubDevice: "ImportSubDevice",
    copySubDevice: "CopySubDevice",
    importDeviceModel: "ImportDeviceModel",
    deviceOperation: "Device Operation",
    basicInfor: "Basic Information",
    remoteTerminal: "Remote Terminal",

    reboot: "Reboot Now",
    shutdown: "Shutdown Now",
    brightness: "Set Brightness",
    audio: "Set Audio",
    lockScreen: "Lock Screen",
    unlockScreen: "Unlock Screen",
    bindDevice: "Bind Device",
    unbindDevice: "Unbind Device",
    sendMessage: "Send Message",
    commandSent: "Command Sent",
    set_threshold: "Set Monitor Threshold",
    set_isMonitor: "Set Android App Monitor",
    "30": "Reboot Schedule",
    "31": "Cancel Reboot Schedule",
    "32": "Shutdown Schedule",
    "33": "Cancel Shutdown Schedule",
    "34": "Sync Time Schedule",
    "35": "Cancel Sync Time Schedule",
    processMonitor: "Set Process Monitor",
    cancelProcessMonitor: "Cancel Process Monitor",
    dockerMonitor: "Set Docker Monitor",
    cancelDockerMonitor: "Cancel Docker Monitor",

    enableApp: "Enable App",
    disableApp: "Disable App",
    startApp: "Start App",
    stopApp: "Stop App",
    installApp: "Install App",
    uninstallApp: "Uninstall App",
    setKiosk: "Set Kiosk",
    cancelKiosk: "Cancel Kiosk",
    addWhitelist: "Add Whitelist",
    removeWhitelist: "Remove Whitelist",
    install: "Install",
    uninstall: "Uninstall",
    upgrade: "Upgrade",
    installDockerCompose: "Install Docker Compose",
    uninstallDockerCompose: "Uninstall Docker Compose",
    installDockerSwarm: "Install Docker Swarm",
    uninstallDockerSwarm: "Uninstall Docker Swarm",
    stopCompose: "Stop Compose",
    startCompose: "Start Compose",
    restartCompose: "Restart Compose",
    startContainer: "Start Container",
    stopContainer: "Stop Container",
    restartContainer: "Restart Container",
    killContainer: "Kill Container",
    pauseContainer: "Pause Container",
    resumeContainer: "Resume Container",
    removeContainer: "Remove Container",
    removeImage: "Remove Docker Image",
    forceRemoveImage: "Force Remove Docker Image",
    removeService: "Remove Service",
    startDockerSwarm: "Start Docker Swarm",
    restartDockerSwarm: "Restart Docker Swarm",
    stopDockerSwarm: "Stop Docker Swarm",
    installDockerSwarm: "Install Docker Swarm",
    uninstallDockerSwarm: "Uninstall Docker Swarm",
    updateComposeFile: "Update Compose File",

    start: "Start",
    stop: "Stop",
    warm: "Warm",
    cold: "Cold",
    origin: "Origin",
    reload: "Reload",
    deploy:"Deploy",
    createSecret: "Create Secret",
    startPLC: "Start PLC",
    stopPLC: "Stop PLC",
    getPLCStatus: "Get PLC Status",
    connectRemoteDesktop: "Connect Remote Desktop",
    disconnectRemoteDesktop: "Disconnect Remote Desktop",
    obtainAgentLogs: "Obtain Agent Logs",
    connectRemoteTerminal: "Connect Remote Terminal",
    screenMonitoring: "Screen monitoring",
    deployFile: "File Deploy",
    deviceGroup: "Device Group",
    setLocation: "Set Location",
    killProcess: "Kill Process",
    startProcess: "Start Process",
    forceOffline: "Force Offline",
    clear: "Clear",
    updateLevel: "Update Level",
    updateNotification: "Update Notification",
    enable: "Enable",
    enableWhitelist: "Whitelist",
    switchSwarmCapacity: "Switch Swarm",
    setMenu: "Set Menu",
    setInfluxDb: "Set InfluxDb",
    setEmail: "Set Email",
    addDingDing: "AddDingDing",
    updateProductIcon: "Update Product Icon",
    setRepo: "Set Repo",
    updateBSP: "OS Update",
    deleteDingDing: "Delete Dingding Robot",
    updateUserRole: "Update User Role",
    updateUserEmail: "Update User Email",
    updateUserPwd: "Update User Password",
    updateRecords: "Update Records",
    systemSettingSecurity: "System Security Settings",
    updateServiceReplicas: "Update Service Replicas",
    updateServiceImage: "Update Service Image",
}
const screen = {
    screenManage: "Dashboard",
    addScreen: "Add Dashboard",
    screenName: "name",
    screenDescription: "describe",
    unpublished: "Unpublished",
    published: "Published",
    copyScreen: "Copy",
    updateName: "Modify Name",
    updateUnpublishedStatus: "Unpublish",
    updatePublishedStatus: "Publish",
    deleteScreen: "Delete",
    preview: "Preview",
    publishUrl: "Publish Address",
    phoneSync: "Phone Sync",
    scanQRCode: "After scanning the code, the monitoring page can be seen and synchronized to your phone"
}

const aiModel = {
    name: "Name",
    filename: "File Name",
    path: "Path",
    type: "Type",
    createTime: "CreateTime",
    description: "Description",
    labels: "marks",
    file: "File",
    createAiModel: "Create AI model",
    newTag: "Add Marks",
    aiModelFileTxtInfo: "The suffix of the file name must be pt",
    selectFile: "Select File"
}

const aiDetect = {
    name: "Name",
    notification: "Notification",
    status: "State",
    channelName: "Video Channel",
    aiModelId: "AI Model",
    createTime: "CreateTime",
    createAiDetect: "Create AI detection",
    aiDetectResult: "AI detection results",
    isShowScreen: 'Show Detection Screen',
    selectModel: "Select Ai Model",
}

const channelList = {
    channelName: "Channel Name",
    status: "Status",
    createTimeStamp: "Creation Time",
    updateTimeStamp: "Update Time",
    accessType: "Access Type",
    keywordHolder: "Keyword for channel name",
    addChannel: "Add Channel",
    editChannel: "Edit Channel",
    during: "Recording retention (days)",
    username: "User name",
    password: "Password",
    address: "Camera Address",
    singleScreen: "Single Screen",
    quadScreen: "Quad Screen",
    nineSplitScreen: "Nine Split Screen",
    selectChannel: "Select channel",
    noData: "No Data",
    closeDialog: "Close",
    viewScreenRecord: "View Video Record",
    fileName: "File Name",
    playVideo: "Play",
    address: "Camera Address",
    duration: "Record duration (mins)"
}

const en = {
    global,
    login,
    home,
    device,
    group,
    monitor,
    appControl,
    remoteControl,
    systemUpdate,
    configuration,
    vnc,
    label,
    header,
    common,
    license,
    workorder,
    server,
    aStore,
    appSecurity,
    fileDeploy,
    solutionApp,
    eventMsg,
    user,
    winPkgControl,
    dockerControl,
    linuxPkgControl,
    overview,
    setting,
    dockerAction,
    terminal,
    systemSettings,
    codesys,
    model,
    subDevice,
    alert,
    rule,
    screenMonitoring,
    alertList,
    extendedConfig,
    time,
    dashboard,
    dataForward,
    collectionHistory,
    operationRecord,
    screen,
    aiModel,
    aiDetect,
    channelList
}

export default en;